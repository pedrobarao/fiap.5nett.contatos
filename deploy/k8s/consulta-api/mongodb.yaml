apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: contatos-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        ports:
        - containerPort: 27017
          name: mongodb
        
        env: # Variáveis de ambiente
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: app-credentials
              key: MONGO_USER
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-credentials
              key: MONGO_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "contatos"
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db    # Montagem do volume persistente
        - name: mongo-init
          mountPath: /docker-entrypoint-initdb.d  # Scripts de inicialização
        # Verificação de saúde do MongoDB
        readinessProbe:
          exec:
            command: 
              - mongosh
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        # Recursos alocados para o MongoDB
        resources:
          limits:
            cpu: "500m"     # Reduzir para 0.5 CPU
            memory: "1Gi"   # Reduzir para 1GB
          requests:
            cpu: "200m"     # Reduzir para 0.2 CPU
            memory: "256Mi" # Reduzir para 256MB
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc  # Referência ao PVC
      - name: mongo-init
        configMap:
          name: mongo-init    # ConfigMap com scripts de inicialização
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init
  namespace: contatos-app
data:
  init.js: |
    db = db.getSiblingDB('contatos');
    db.createUser({
      user: 'contatos',
      pwd: 'contatos',
      roles: [
        { role: 'readWrite', db: 'contatos' }
      ]
    }); 